# MinhOS v3 Development Services
# ==============================

version: '3.8'

services:
  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: minhos_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # PostgreSQL for production (alternative to SQLite)
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: minhos_postgres
    environment:
      POSTGRES_DB: minhos
      POSTGRES_USER: minhos
      POSTGRES_PASSWORD: minhos_dev_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U minhos -d minhos"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: minhos_grafana
    profiles: ["monitoring"]
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: minhos_prometheus
    profiles: ["monitoring"]
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Jaeger for tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: minhos_jaeger
    profiles: ["tracing"]
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # jaeger.thrift
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped

  # MinIO for object storage (optional)
  minio:
    image: minio/minio:latest
    container_name: minhos_minio
    profiles: ["storage"]
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

  # Jupyter for analysis (optional)
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: minhos_jupyter
    profiles: ["analysis"]
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data:ro
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=minhos
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  minio_data:
    driver: local

networks:
  default:
    name: minhos_network