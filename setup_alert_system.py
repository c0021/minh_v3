#!/usr/bin/env python3
"""
MinhOS Alert System Setup
=========================
Setup script to configure and test the alert system.
"""

import asyncio
import os
import sys
import getpass
from pathlib import Path

# Add the project root to the path
sys.path.insert(0, str(Path(__file__).parent))

from minhos.services.alert_system import AlertSystem, get_alert_system

def setup_email_configuration():
    """Interactive setup for email configuration"""
    print("üîß MinhOS Alert System Setup")
    print("=" * 40)
    
    print("\nüìß Email Configuration")
    print("To receive email alerts, please provide your email settings:")
    
    # Get email configuration
    email_user = input("Gmail address (sender): ").strip()
    if not email_user:
        print("‚ùå Email address is required")
        return False
    
    email_password = getpass.getpass("Gmail app password (hidden): ").strip()
    if not email_password:
        print("‚ùå Email password is required")
        return False
    
    recipient_email = input(f"Recipient email (default: {email_user}): ").strip()
    if not recipient_email:
        recipient_email = email_user
    
    # Advanced settings (optional)
    print("\n‚öôÔ∏è Advanced Settings (press Enter for defaults)")
    smtp_server = input("SMTP server (default: smtp.gmail.com): ").strip() or "smtp.gmail.com"
    smtp_port = input("SMTP port (default: 587): ").strip() or "587"
    
    # Monitoring intervals
    print("\n‚è±Ô∏è Monitoring Intervals (in seconds)")
    process_interval = input("Process check interval (default: 60): ").strip() or "60"
    service_interval = input("Service check interval (default: 120): ").strip() or "120"
    bridge_interval = input("Bridge check interval (default: 300): ").strip() or "300"
    
    # Alert thresholds
    print("\nüö® Alert Thresholds")
    max_memory = input("Max memory usage MB (default: 2048): ").strip() or "2048"
    max_cpu = input("Max CPU usage % (default: 80): ").strip() or "80"
    max_failures = input("Max consecutive failures (default: 3): ").strip() or "3"
    cooldown_minutes = input("Alert cooldown minutes (default: 30): ").strip() or "30"
    
    # Create environment variables
    env_vars = {
        "MINHOS_ALERT_EMAIL_USER": email_user,
        "MINHOS_ALERT_EMAIL_PASSWORD": email_password,
        "MINHOS_ALERT_RECIPIENT_EMAIL": recipient_email,
        "MINHOS_ALERT_SMTP_SERVER": smtp_server,
        "MINHOS_ALERT_SMTP_PORT": smtp_port,
        "MINHOS_ALERT_PROCESS_INTERVAL": process_interval,
        "MINHOS_ALERT_SERVICE_INTERVAL": service_interval,
        "MINHOS_ALERT_BRIDGE_INTERVAL": bridge_interval,
        "MINHOS_ALERT_MAX_MEMORY_MB": max_memory,
        "MINHOS_ALERT_MAX_CPU_PERCENT": max_cpu,
        "MINHOS_ALERT_MAX_FAILURES": max_failures,
        "MINHOS_ALERT_COOLDOWN_MINUTES": cooldown_minutes,
        "MINHOS_ALERTS_ENABLED": "true",
        "MINHOS_ALERTS_EMAIL_ENABLED": "true",
    }
    
    # Save to .env file
    env_file = Path(".env")
    
    # Read existing .env file
    existing_env = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_env[key] = value
    
    # Update with new alert settings
    existing_env.update(env_vars)
    
    # Write back to .env file
    with open(env_file, 'w') as f:
        f.write("# MinhOS Configuration\n")
        f.write("# Generated by setup_alert_system.py\n\n")
        
        # Group related settings
        f.write("# Alert System Configuration\n")
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
        
        f.write("\n# Other Settings\n")
        for key, value in existing_env.items():
            if not key.startswith("MINHOS_ALERT"):
                f.write(f"{key}={value}\n")
    
    print(f"\n‚úÖ Configuration saved to {env_file}")
    return True

async def test_alert_system():
    """Test the alert system configuration"""
    print("\nüß™ Testing Alert System...")
    
    try:
        # Create alert system instance
        alert_system = AlertSystem()
        await alert_system._initialize()
        
        print("‚úÖ Alert system initialized successfully")
        
        # Test email configuration
        print("üìß Testing email configuration...")
        email_test_result = await alert_system.test_email_configuration()
        
        if email_test_result:
            print("‚úÖ Email test successful - check your inbox!")
        else:
            print("‚ùå Email test failed - check your configuration")
            return False
        
        print("‚úÖ Alert system test completed successfully")
        return True
        
    except Exception as e:
        print(f"‚ùå Alert system test failed: {e}")
        return False

def create_systemd_service():
    """Create systemd service for alert system"""
    print("\nüîß Creating systemd service...")
    
    service_content = f"""[Unit]
Description=MinhOS Alert System
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'colindo')}
WorkingDirectory={Path(__file__).parent}
Environment=PATH={os.environ.get('PATH')}
ExecStart=/usr/bin/python3 -m minhos.services.alert_system
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
    
    service_file = Path("/tmp/minhos-alert-system.service")
    with open(service_file, 'w') as f:
        f.write(service_content)
    
    print(f"‚úÖ Service file created: {service_file}")
    print("\nTo install the service, run:")
    print(f"sudo cp {service_file} /etc/systemd/system/")
    print("sudo systemctl daemon-reload")
    print("sudo systemctl enable minhos-alert-system")
    print("sudo systemctl start minhos-alert-system")

def create_startup_script():
    """Create startup script to integrate with MinhOS"""
    startup_script = Path("start_minhos_with_alerts.py")
    
    script_content = '''#!/usr/bin/env python3
"""
Start MinhOS with Alert System
=============================
Starts both MinhOS and the alert system together.
"""

import asyncio
import signal
import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from minhos.services.alert_system import create_alert_system
import subprocess

async def main():
    """Start MinhOS with alert system"""
    print("üöÄ Starting MinhOS with Alert System...")
    
    # Start alert system
    alert_system = await create_alert_system()
    print("‚úÖ Alert system started")
    
    # Start MinhOS main process
    minhos_process = subprocess.Popen([
        sys.executable, "minh.py", "start"
    ], cwd=Path(__file__).parent)
    
    print("‚úÖ MinhOS started")
    print("üîç Alert system is monitoring...")
    
    def signal_handler(signum, frame):
        print("\\nüõë Shutting down...")
        minhos_process.terminate()
        asyncio.create_task(alert_system.stop())
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # Wait for MinhOS process
        minhos_process.wait()
    except KeyboardInterrupt:
        pass
    finally:
        await alert_system.stop()

if __name__ == "__main__":
    asyncio.run(main())
'''
    
    with open(startup_script, 'w') as f:
        f.write(script_content)
    
    # Make executable
    startup_script.chmod(0o755)
    
    print(f"‚úÖ Startup script created: {startup_script}")
    print(f"Run with: python3 {startup_script}")

async def main():
    """Main setup function"""
    print("üöÄ MinhOS Alert System Setup")
    print("=" * 50)
    
    # Step 1: Configure email
    if not setup_email_configuration():
        print("‚ùå Setup failed")
        return
    
    # Step 2: Test configuration
    test_success = await test_alert_system()
    if not test_success:
        print("‚ö†Ô∏è Alert system test failed, but configuration was saved")
        print("You can test later by running: python3 -m minhos.services.alert_system")
    
    # Step 3: Create integration scripts
    create_startup_script()
    create_systemd_service()
    
    print("\nüéâ Alert System Setup Complete!")
    print("=" * 50)
    print("\nüìã Next Steps:")
    print("1. Check your email for the test notification")
    print("2. Start MinhOS with alerts: python3 start_minhos_with_alerts.py")
    print("3. Or integrate into existing startup process")
    print("4. Monitor alerts in: logs/alerts.json")
    
    print("\nüìß Alert Types:")
    print("‚Ä¢ Process down/high resource usage")
    print("‚Ä¢ Service health issues")
    print("‚Ä¢ Bridge connectivity problems")
    print("‚Ä¢ Critical errors in logs")
    print("‚Ä¢ Recovery notifications")
    
    print("\n‚öôÔ∏è Configuration:")
    print("‚Ä¢ Settings saved in .env file")
    print("‚Ä¢ Modify environment variables to adjust thresholds")
    print("‚Ä¢ Alert cooldown prevents spam")

if __name__ == "__main__":
    asyncio.run(main())
