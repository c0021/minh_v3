[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "minhos"
version = "3.0.0"
description = "MinhOS v3 - Linux-Native Trading Platform"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MinhOS Development Team", email = "dev@minhos.ai"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "aiohttp>=3.9.0",
    "websockets>=11.0.2",
    "sqlalchemy>=2.0.23",
    "redis>=5.0.1",
    "numpy>=1.24.3",
    "pandas>=2.0.3",
    "scikit-learn>=1.3.2",
    "pyyaml>=6.0.1",
    "python-dateutil>=2.8.2",
    "click>=8.1.7",
    "rich>=13.7.0",
    "psutil>=5.9.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "ruff>=0.1.6",
]
analysis = [
    "jupyter>=1.0.0",
    "matplotlib>=3.7.2",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    "ta-lib>=0.4.26",
    "yfinance>=0.2.22",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
]

[project.urls]
Homepage = "https://github.com/minhos/minhos_v3"
Documentation = "https://docs.minhos.ai"
Repository = "https://github.com/minhos/minhos_v3.git"
Issues = "https://github.com/minhos/minhos_v3/issues"

[project.scripts]
minhos = "minhos.cli:main"
minhos-dashboard = "minhos.dashboard.main:main"
minhos-backtest = "minhos.analysis.backtest:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["minhos*"]

[tool.setuptools.package-data]
minhos = ["*.yaml", "*.yml", "*.json", "*.sql"]

# Black formatting
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude generated files
  .*_pb2\.py
  | venv
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "ta.*",
    "yfinance.*",
    "websockets.*",
    "redis.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "bridge: marks tests that require Windows bridge connection",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["minhos"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff linting
[tool.ruff]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (we'll handle complexity manually)
]
line-length = 100
target-version = "py39"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["B011"]      # assert false in tests is ok